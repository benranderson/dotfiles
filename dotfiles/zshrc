#
# Executes commands at the start of an interactive session.
#

# activate homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"

# source Prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# pyenv config
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# set environment variables
# ensure packages are only installed in an active virtual environment
export PIP_REQUIRE_VIRTUALENV=true
# enable colorized output for howdoi
export HOWDOI_COLORIZE=1
# pipx config
export PATH="$PATH:/Users/benranderson/.local/bin"

# aliases
# swtich to branch
alias gs="git switch"
# switch to new branch
alias gnb="git switch -c"
# stage and commit all chnages
alias gac="git add -A && git commit -m"
# pull updates from origin
alias gpl="git pull"
# push all changes, including tags, to origin
alias gp="git push --follow-tags"
# push new branch to origin
alias gp1="git push --set-upstream origin"
# delete local branch
alias gdb="git branch -D"
# delete online branch
alias gdob="git push origin -d"
# rename branch
alias grb="git branch -m"
# rebase current branch on develop branch
alias grd="git rebase develop"
# rebase current branch on master branch
alias grm="git rebase master"
# undo last commit
alias guc="git reset --soft HEAD~1"
# list outdated python packages
alias plo="pip list --outdated"
# remove information on branches that were deleted on origin
alias gfp="git fetch --prune"
# list commit messages since branch creation
alias glc='git log --oneline --format="- %s" develop..'
# open terminal a current working directory
alias term="open -a Terminal"
# run script to open work apps
alias work="./.work.sh"
# run script to update tools
alias update="./.update-tools.sh"
# uninstall all python libraries
alias pua="pip uninstall -y -r <(pip freeze)"

# functions
venv() {
    # create virtual env $1, activate it and update pip version
    pyenv virtualenv "$1"
    pyenv local "$1"
    pip install -U pip
}

# enable tab completion for Terraform commands
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform

# pip zsh completion
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] 2>/dev/null ))
}
compctl -K _pip_completion pip

# add openjdk (Java) to path
export PATH="/usr/local/opt/openjdk/bin:$PATH"
export CPPFLAGS="-I/usr/local/opt/openjdk/include"
